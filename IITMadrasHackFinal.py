# -*- coding: utf-8 -*-
"""Hackathon.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ErVc_G1YaRHqm9YVV3csdGR7fFuW5fac

**ISARC HACKATHON 2023**

**Team Name: 635011-U910M1AK**



**Team Members:**




1. Jatin
2. Nikhil Goyal
3. Anandi Bali
4. Himanshu Guleria

**To install the pycaret**
"""

!pip install pycaret &> /dev/null
!pip install markupsafe==2.0.1
print ("Pycaret installed sucessfully!!")

"""**To check the version of installed pycaret**"""

from pycaret.utils import version
version()

"""**To upload the file( Dataset)**"""

from google.colab import files
files.upload()

"""**Install the libraries**"""

from pycaret.regression import *
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt
import math

"""**Read the dataset**"""

DataSet = pd.read_csv("64419cffd5f58_ISARC_Hackathon_Dataset (1).csv",encoding='cp1252')
DataSet.columns.values[-1] = "target"   ### rename the last column as target

"""**Parameter setting for all the models**"""

s = setup(data =  DataSet, target='target',train_size = 0.8,normalize='true',transformation='true',pca='true')

"""**Comparision of all the models using "Normalization" + "Transformation" + "PCA"**"""

cm = compare_models()

"""**Print the best model**"""

print(cm)

"""**Create the model**"""

Model = create_model('et')

"""**Split the Dataset**"""

X = DataSet.iloc[:, :-1]
y = DataSet.iloc[:, -1]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

"""**Make predictions on the test dataset**"""

newPredictions = predict_model(Model, data = X_test)
newPredictions

pred=newPredictions.iloc[:,-1]   ## mark the last column as the pred as that was our predictions

"""**Accuracy of the model**"""

r2_score(y_test,pred)

"""**Mean Square Error**"""

MSE=mean_squared_error(y_test, pred)
MSE

"""**Root Mean Square Error**"""

math.sqrt(MSE)

"""**"Scatter plot" b/w actual and predicted**"""

actual = y_test

plt.scatter(actual, pred)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Actul Vs Predicted')
plt.savefig("result-scatter-plot.jpg", dpi=300)
plt.show()

"""**Plot the "validation curve**"""

plot_model(Model, plot='vc')

"""**Creating top 3 models**"""

Model1 = create_model('et')
Model2 = create_model('xgboost')
Model3 = create_model('lightgbm')

"""**Making Predictions on top 3 models**"""

newPredictions1 = predict_model(Model1, data = X_test)
pred1=newPredictions1.iloc[:,-1]
newPredictions2 = predict_model(Model2, data = X_test)
pred2=newPredictions2.iloc[:,-1]
newPredictions3 = predict_model(Model3, data = X_test)
pred3=newPredictions3.iloc[:,-1]

"""**Ensembling the models**"""

pred_final=(pred1+pred2+pred3)/3.0
pred_final

"""**Accuracy of Extra Trees Regressor Model**"""

r2_score(y_test,pred1)

"""**Accuracy of Extreme Gradient Boosting Model**"""

r2_score(y_test,pred2)

"""**Accuracy of Light Gradient Boosting Machine Model**"""

r2_score(y_test,pred3)

"""**Accuracy after ensembling the three models**"""

r2_score(y_test,pred_final)

"""**Conclusion** : Extra Tree Regressor gives the highest accuracy

**Pipeline of our best model i.e. Extra Tree Regressor**
"""

finalize_model(cm)

"""Save Model"""

sm = save_model(Model1, 'ModelFile1')

from google.colab import files
files.download('ModelFile1.pkl')

"""Upload Model"""

from google.colab import files
files.upload()

Model = load_model('ModelFile1')



DataS = pd.read_csv("64419cffd5f58_ISARC_Hackathon_Dataset (1).csv",encoding='cp1252')

Predictions = predict_model(Model, data = DataS)
Predictions

pred=Predictions.iloc[:,-1]
actual=DataSet.iloc[:,-1]

pred

actual

r2_score(actual,pred)